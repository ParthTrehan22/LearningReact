//This Keyword
//-> In case of regular functions, this represents the object that called the function.
//-> In case of arrow functions, this represents the header object irrespective of the object that called the function.
//Var
//Var has function scope not block scope, means var is available outside of a block too, but not function.
//Let
//Let has block scope.
//Const
//Const is a variable that once created, does not change value. Has block scope.
//JSX is an extension of JavaScript based on ES6, and is translated into regular JS at *runtime*.
//HTML code should have one TOP Level element, means if we want to have multiple headers, then these headers should be inside a div(parent element).
//JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element.
//Components
//Components are like functions in JS but they work in isolation and return HTML using the render function.
//In Components the properties are saved in objects called state.
//Also, we can send the props as attributes to the Components, just like we pass parameters in a normal function.
//Props 
//Props are the attributes or arguments which we pass to the Components.
//Lifecycle Methods
//Mounting
//constructor - Where we set the properties, or initial state
//getDerivedStateFromProps - called just before rendering, used to set the props, takes in props and state as argument and returns a state.
//componentDidMount - called after the component is rendered. This is where you run statements that requires that the component is already placed in the DOM.
//Updating
//getDerivedStateFromProps - called after the component has been updated
//shouldComponentUpdate - returns a boolean value, that defines that the component should update or not, by default true.
//getSnapshotBeforeUpdate - this method has the access to props and states before the component is updated. Also, componentDidUpdate function should be present else there will be error.
//componentDidUpdate - this method is called after the component is updated.   
//Unmounting 
//componentWillUnmount - called before the component is about to be unmounted.
//Events - events are actions that need to be performed, like onClick, mouseOver, etc.
//A good practice is to put the event handler as a method in the component class.
//Good Practice - Use arrow functions for event handlers as arrow functions binds "this" to the component or object that defined it.
//Other than using arrow functions, regular functions can also implement this by using binding explicitly.
//Arrow function - this refers to the component or object that defined the function.
//Regular function - this refers to the component or object that called the function.
//In case of regular function if you don't bind this keyword, then this keyword will return undefined.
//Passing arguments
//Similar to above in case of arrow functions we can directly pass values, but in case the event handler is a regular funtion then we have to bind the event handler to this.
//Point to remember, in case of arrow function, keep in mind to use arrow function while passing the value as well.
//Event handlers have access to the React event that triggered the function.
//In case we need to access the event from the handler, and the handler is implementing the arrow function then we have to pass some variable explicitly in order to have the type of event.
//In case we need to access the event from the handler, and the handler is implementing the regular function then the last parameter inside the event handler contains the event object and we dont have to pass it explicitly.
